#Customer Class
class customer:
"""Represents a customer who places orders in the delivery system."""

    def __init__(self, customer_id: str, name: str, email: str, phone_number: str, address: str):
        """Initializes a Customer with ID, name, email, phone number, and address."""
        self.__customer_id = customer_id  # Unique customer ID
        self.__name = name  # Customer's full name
        self.__email = email  # Customer's email address
        self.__phone_number = phone_number  # Contact number
        self.__address = address  # Delivery address

    # Getter and Setter Methods
    def get_customer_id(self):
        """Returns the customer ID."""
        return self.__customer_id

    def set_customer_id(self, customer_id: str):
        """Sets a new customer ID."""
        self.__customer_id = customer_id

    def set_name(self, name: str):
        """Sets a new customer name."""
        self.__name = name
def set_name(self, name: str):
        """Sets a new customer name."""
        self.__name = name

    def get_email(self):
        """Returns the customer's email."""
        return self.__email

    def set_email(self, email: str):
        """Sets a new email address."""
        self.__email = email

    def get_phone_number(self):
        """Returns the customer's phone number."""
        return self.__phone_number

    def set_phone_number(self, phone_number: str):
        """Sets a new phone number."""
        self.__phone_number = phone_number

    def get_address(self):
        """Returns the customer's address."""
        return self.__address

    def set_address(self, address: str):
        """Sets a new address."""
        self.__address = address 

# Function header (not implemented yet)
    def generate_customer_note(self):
        """Generates a note about the customer's order history."""
        pass  # Implementation will be added later

# Order Class
class Order:
    """Represents a customer's order containing products."""

    def __init__(self, order_id: str, order_date: str, customer: Customer, status: str, products: list):
        """Initializes an Order with ID, date, customer, status, and products list."""
        self.__order_id = order_id
        self.__order_date = order_date
        self.__customer = customer  # Reference to a Customer object
        self.__status = status  # Order status (e.g., 'Pending', 'Delivered')
        self.__products = products  # List of Product objects in the order

    # Getter and Setter Methods
    def get_order_id(self):
        """Returns the order ID."""
        return self.__order_id

    def set_order_id(self, order_id: str):
        """Sets a new order ID."""
        self.__order_id = order_id

    def get_order_date(self):
        """Returns the order date."""
        return self.__order_date

    def set_order_date(self, order_date: str):
        """Sets a new order date."""
        self.__order_date = order_date

    def get_status(self):
        """Returns the order status."""
        return self.__status

    def set_status(self, status: str):
        """Updates the order status."""
        self.__status = status

    def get_products(self):
        """Returns the list of products in the order."""
        return self.__products

    def set_products(self, products: list):
        """Sets a new list of products in the order."""
        self.__products = products

    def generate_delivery_note(self):
        """Generates a delivery note for the order."""
        pass

# Product Class
class Product:
    """Represents a product available for purchase in the system."""

    def __init__(self, product_id: str, product_name: str, price: float, stock_availability: bool, category: str):
        """Initializes a Product with ID, name, price, stock availability, and category."""
        self.__product_id = product_id
        self.__product_name = product_name
        self.__price = price
        self.__stock_availability = stock_availability
        self.__category = category

    # Getter and Setter Methods
    def get_product_id(self):
        return self.__product_id

    def set_product_id(self, product_id: str):
        self.__product_id = product_id

    def get_product_name(self):
        return self.__product_name

    def set_product_name(self, product_name: str):
        self.__product_name = product_name

    def get_price(self):
        return self.__price

    def set_price(self, price: float):
        self.__price = price

    def get_stock_availability(self):
        return self.__stock_availability

    def set_stock_availability(self, stock_availability: bool):
        self.__stock_availability = stock_availability

    def get_category(self):
        return self.__category

    def set_category(self, category: str):
        self.__category = category

    def generate_product_info(self):
        """Generates a summary of the product details."""
        pass

# Payment Class
class Payment:
    """Represents a payment transaction for an order."""

    def __init__(self, payment_id: str, amount: float, method: str, credit_card_number: str, cvv: str):
        """Initializes a Payment with ID, amount, method, and card details."""
        self.__payment_id = payment_id
        self.__amount = amount
        self.__method = method
        self.__credit_card_number = credit_card_number
        self.__cvv = cvv

    def generate_payment_receipt(self):
        """Generates a payment receipt."""
        pass

# DeliveryStaff Class
class DeliveryStaff:
    """Represents a delivery staff member responsible for delivering orders."""

    def __init__(self, staff_id: str, name: str, phone_number: str, delivery_status: str, assigned_orders: list):
        """Initializes a DeliveryStaff with ID, name, phone number, status, and assigned orders."""
        self.__staff_id = staff_id
        self.__name = name
        self.__phone_number = phone_number
        self.__delivery_status = delivery_status
        self.__assigned_orders = assigned_orders  # List of Order objects

    def generate_delivery_info(self):
        """Generates delivery details for tracking."""
        pass 
